generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Recipe {
  name           String           @unique @db.VarChar(50)
  description    String           @default("no description provided")
  createdAt      DateTime?        @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime?        @updatedAt @db.Timestamptz(3)
  id             String           @id @default(cuid()) @db.VarChar(50)
  userId         String           @db.VarChar(50)
  controllers    Controller[]
  user           User             @relation(fields: [userId], references: [id])
  recipeSettings RecipeSettings[]
  tags           Tag[]            @relation("RecipeToTag")
}

model User {
  id            String       @id @default(cuid()) @db.VarChar(50)
  name          String       @unique
  email         String       @unique @db.VarChar(50)
  emailVerified DateTime?    @db.Timestamptz(3)
  image         String?
  account       Account[]
  controllers   Controller[]
  recipes       Recipe[]
  sessions      Session[]
}

model Tag {
  id      String   @id @default(cuid())
  name    String   @unique
  recipes Recipe[] @relation("RecipeToTag")
}

model Controller {
  id        String    @id @default(cuid()) @db.VarChar(50)
  name      String    @unique
  createdAt DateTime? @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  isActive  Boolean   @default(false)
  location  String?
  recipeId  String    @default("1") @db.VarChar(50)
  port      String    @default("5000")
  ipAddress String    @db.VarChar(20)
  userId    String    @db.VarChar(50)
  recipe    Recipe    @relation(fields: [recipeId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model RecipeSettings {
  id       String @id @default(cuid()) @db.VarChar(50)
  day      String
  temp     Int
  humidity Int
  tempOff  Int
  tempOn   Int
  hours    Int
  recipeId String @db.VarChar(50)
  recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
